MyCat
1.数据库中间件

2.功能
	-读写分离
	-数据分片
		-垂直拆分
		-水平拆分
		-垂直+水平拆分
	-多数据源整合
	
3.原理--“拦截”

	 Mycat的原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的 SQL 语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发往后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户
	 
4.安装和启动mycat
	
	-0.前提mysql主从复制已经搭建好
	-1.解压缩文件拷贝到linux下 /usr/local/
	-2.明确三个配置文件
		-schema.xml---定义逻辑库，表、分片节点等内容
		-server.xml---定义用户以及系统相关变量，如端口等.
		-rule.xml---定义分片规则
	-3.先修改server.xml下的user标签，只修改用户名（mycat）和密码即可
	-4.再修改schema.xml下的<schema>、<dataNode>、<dataHost>三个标签
	-5.验证数据库远程访问情况
		mysql -uroot -p -h 192.168.56.1 -P 3306
		mysql -uroot -p -h 192.168.56.130 -P 3306
	
	-6.启动mycat程序
		-控制台启动 ：去mycat/bin 目录下 ./mycat console（测试用）
		-后台启动 ：去mycat/bin 目录下 ./mycat start（生产环境用）

	-7.登录mycat
		-后台管理窗口 mysql -umycat -p123456 -h 192.168.56.130 -P9066
		-数据窗口 mysql -umycat -p123456 -h 192.168.56.130 -P8066
	
5.读写分离
	-1.修改schema.xml <dataHost>中的balance属性
		-负载均衡类型，目前的取值有4 种：
		-1. balance="0", 不开启读写分离机制，所有读操作都发送到当前可用的 writeHost 上。
		-2. balance="1"，全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1->S1，M2->S2，并且 M1 与 M2 互为主备)，正常情况下，M2,S1,S2 都参与 select 语句的负载均衡。
	
		四台机器，只有一台写主机，三台读主机。
		虽然有备机，但备机读的是主机，当主机宕机后，备机上线成为主机。
	   注意s1只读m1，s2只读m2。当主机m1重新上线后，主机m1就成为了备机，s1还是只读m1		
		
		-3. balance="2"，所有读操作都随机的在 writeHost、readhost 上分发。
		-4. balance="3"，所有读请求随机的分发到 readhost 执行，writerHost 不负担读压力
	-2.分别在主从数据库中建表
	-3.分别在主从数据库中插入一下内容
		insert into mytable values(@@hostname);
	-4.在mycat数据窗口下：select * from mytable查看结果
	
	
6.分库（前提是要有新的干净的数据库）
	-创建新的数据库
	-修改schema.xml，不再使用主从复制的数据库
	-启动mycat程序
	-在mycat中创建新的表
	-在数据库中查看建表的结果
	
7.分表
	
	分片orders表
	-修改schema.xml，指定要进行分片的表，以及分片的规则
		-分片规则：以orders订单表为例，分片标准应该是customer_id
	-修改rule.xml 添加分片的规则和修改对应实现改规则的函数
	-修改函数对应的数据库节点数
	-记得在新的数据库中创建对应的要分片的表

	跨数据库关联查询
	
	1）ER表
	分片与orders表关联的表order_detail表
	-修改schema.xml，在orders表table标签下添加字表order_detail表
	-记得在新的数据库中创建对应的要分片的表
	
	2）全局表
	设定为全局的表，会直接复制给每个数据库一份，所有写操作也会同步给多个库。
	所以全局表一般不能是大数据表或者更新频繁的表
	一般是字典表或者系统表为宜。
	
	-修改schema.xml，添加字典表对应的标签，这里是dict_order_type表
	-记得在新的数据库中创建对应的要分片的表
	
	全局序列 唯一标记每条数据的id序列，不能够使用id自增作为全局序列，会出现数据冲突
	
	实现全局序列三种方式
	1.本地文件：当mycat挂了后，本地文件也随之消失，即便有备机上线，这个本地文件也是新的，不再包含之前本地文件的内容，这种方式不靠谱，抗风险能力太差
	2.时间戳方式：时间戳18位，用来充当id太过浪费资源
	3.数据库方式（最靠谱）
		-创建专门存储序列的表
		-创建序列脚本（官方提供的）
		-为序列表分配初始数据，一般增长步长定位100，每次给mycat提供100条
		保证不会重复
		-修改server.xml将实现全局序列的方式改为1即数据库模式
		-查看sequence_db_conf.properties，设置对应orders表的数据节点
		-插入数据查看订单表结果
		-关闭mycat并重启，再查看订单表结果
		
		-TRUNCATE MYCAT_SEQUENCE
			-TRUNCATE 和 DELETE的区别
			TRUNCATE删除数据不能回滚，DELETE删除数据可以回滚
			DELETE删除数据为什么可以回滚
			没DELETE的一条数据，mysql就把这每一条数据写到了日志里
			把数据只是从表里删除了，而日志会占磁盘空间，如果该一次性DELETE大批量了数据，可能会造成磁盘空间不足
			
	4.自定义java程序模块实现			





















	
	
	
	
	