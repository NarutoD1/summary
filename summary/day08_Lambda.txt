jdk8特性

1.Lambda表达式写法：
	拷贝小括号（），写死右箭头->，落地大括号{...}
2.函数式接口
	通过lambda表达式创建对象实现的接口就是函数式接口
	函数式接口中只能定义一个抽象方法
	可以有多个静态方法、默认方法（java8新变化）
	@FunctionalInterface该注解表明接口为函数是接口

	四大核心函数式接口
	--消费型接口Consumer<T> 返回值类型void  抽象方法 void accept(T t)
	--供给型接口Supplier<T> 返回值类型T    抽象方法 T get()
	--函数型接口Function<T,R> 返回值类型R   抽象方法 R apply(T t)
	--断言型接口Predicate<T>  返回值类型boolean  抽象方法 boolean test(T t) 
	
3.Stream流
	
	是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。
	“集合讲的是数据，流讲的是计算！”
	
	特点：
		-Stream 自己不会存储元素
		-Stream不会改变源对象。相反，他们会返回一个持有结果的新Stream。
    	-Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。
		
	使用Stream的阶段步骤(源头=>中间流水线=>结果)
		-创建一个Stream：一个数据源（数组、集合）
		-中间操作：一个中间操作，处理数据源数据
		-终止操作：一个终止操作，执行中间操作链，产生结果
		
	使用格式例子：
	
	数据源.filter(
		(p)->{
			return 过滤条件
		}
	).map(
		(p)->{
			修改操作
			return 修改的结果
		}
	).limit(输出限制数量).foreach(System.out::println);
	