mysql中SQL语句必须以分号为结束标志的是标准sql语句
不用加分号的是mysql的语句


1.CentOS7上 mysql5.7的安装--对比与mysql5.5安装的区别

	-1.拷贝&解压缩
		需要的压缩包变为4个，按照安装顺序依次是：
		mysql-community-common-5.7.16-1.el7.x86_64.rpm
		mysql-community-libs-5.7.16-1.el7.x86_64.rpm
		mysql-community-client-5.7.16-1.el7.x86_64.rpm
		mysql-community-server-5.7.16-1.el7.x86_64.rpm

	-2.检查当前系统是否安装过mysql	
		rpm -qa|grep mariadb
		若存在mariadb-libs-5.5.56-2.el7.x86_64先卸载
		rpm -e --nodeps  mariadb-libs
		再查询一下，卸载成功没有
		rpm -qa|grep mariadb
		
	-3.检查当前mysql依赖环境
		rpm -qa|grep libaio 查看是否存在以下环境
		libaio-0.3.109-13.el7.x86_64
		rpm -qa|grep net-tools 查看是否存在以下环境
		net-tools-2.0-0.22.20131004git.el7.x86_64
		
		如果不存在需要到centos安装盘里进行rpm安装
	
	-4.检查/tmp文件夹权限
		由于mysql安装过程中，会通过mysql用户在/tmp目录下新建tmp_db文件，所以请给/tmp较大的权限
		执行 ：chmod -R 777 /tmp
		
	-5.安装，严格按照如下安装顺序执行
		rpm -ivh mysql-community-common-5.7.16-1.el7.x86_64.rpm 
		rpm -ivh mysql-community-libs-5.7.16-1.el7.x86_64.rpm
		rpm -ivh mysql-community-client-5.7.16-1.el7.x86_64.rpm 
		rpm -ivh mysql-community-server-5.7.16-1.el7.x86_64.rpm
		
	-6.查看安装是否成功
		mysqladmin --version
		
2.手动初始化mysql服务（5.5是自动初始化的）
	-1.mysqld --initialize --user=mysql
	
	-2.--initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将该密码标记为过期，登陆后你需要设置一个新的密码（5.5则是用户自己设置密码）
	
	-3.查看密码
	cat /var/log/mysqld.log
	root@localhost: 后面就是初始化的密码   vf!5ziFG%?F&
		
3.启动和关闭MySQL服务
	systemctl start mysqld.service
	systemctl stop mysqld.service
	
	查看状态 systemctl status mysqld 
	
	5.5版本的是：
		service mysql start 	
		service mysql stop
			
4.首次登录，录入初始化密码，修改密码
	mysql -uroot -p
	输入初始密码
	因为初始化密码默认是过期的，所以查看数据库会报错
	ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';
	
	注意新密码太简单也会报错
		
5.查看mysql的安装目录ps -ef|grep mysql
		
6.查看mysql是否自启动（默认自启动）
	systemctl list-unit-files|grep mysqld.service
	
   如不是enabled可以运行如下命令设置自启动
	systemctl enable mysqld.service
			
7.修改字符集问题
	mysql在修改字符集之前使用的默认是latinl
	5.7中，插入中文时直接会报错，5.5中则可以插入成功，但会出现乱码
	
	1）修改配置文件
	vim  /etc/my.cnf
	重新启动mysql
	systemctl restart mysqld.service
	查看一下状态
	systemctl status mysqld.service
	
	在修改字符集之前已经建好的表，此时仍不能插入中文
	需要修改已生成的库表字符集
	
	2）对于已经创建的数据库和表
	
	-修改数据库的字符集
	mysql> alter database 数据库名 character set 'utf8';
	-修改数据表的字符集
	mysql> alter table 表名 convert to  character set 'utf8';
	
	3）对于已经插入的数据，只能删了重新插入
		
8.Mysql 的用户与权限管理

	-1.首先用navicat测试远程连接失败，切换至系统数据库mysql，查看user表
	select *from user\G;
	可以看到关于用户的权限分配信息
	
	-2.select Host,User,authentication_string from user;
		查看user表的连接类型，用户名，密码字段
		发现没有创建远程连接的用户
	-3.创建用户
		create user mc identified by '123456';
		表示创建名称为mc的用户，密码设为123456;
	-4.再次查看用户表这三项信息
		发现新创建的用户mc的连接类型为% 表示所有远程通过 TCP方式的连接
	-5.新创建的用户mc可以远成连接了，但还没有分配权限
		
		以root用户为例
		授予通过网络方式登录的的root用户,对所有库所有表的全部权限，密码设为123456.
		grant all privileges on *.* to root@'%'  identified by '123456';

9.MySQL的sql_mode合理设置
	
	mysql5.7配置了sql_modle,使得在违反group by语句原则时将会报错
	-1.group by使用原则：select 后面只能放 函数 和group by后的字段
	-2.查看sql_modle配置   show  variables like 'sql_mode';
	
		其中的ONLY_FULL_GROUP_BY是对于GROUPBY聚合操作，
		如果在SELECT中的列,没有在GROUPBY中出现,那么这个SQL是不合法的,因为列不在GROUP BY从句中
	
	-3.其中的ORACLE配置使得只要在mysql上的sql语法遵循ORACLE的语法，那么在跨数据库时在ORACLE上依然可以运行
		
10.MySQL底层逻辑架构以及查询的具体流程

	1.mysql之外的程序访问mysql数据库，与连接池进行连接
	2.首先查询catch和buffer即查询缓存，若缓存里有命中的查询结果，那么直接返回查询缓存中的数据
	（缓存命中的条件是两次sql语句一模一样，类似于nosql数据库,通过key-value找到结果，key就是sql语句,value就是缓存中存放的结果）
	
	3.若查新缓存没有命中的查询结果,那么就去老老实实执行sql命令，首先是来到sql接口（SQL Interface），由sql接口接受sql命令
	
	4.sql结构将sql命令传递到解析器（parser），解析器对sql命令进行验证和解析
	
	5.之后由优化器（Optimizer）对sql命令进行优化。在不影响sql语句执行结构的前提下对sql命令进行语句顺序的调整，生成执行计划
	
	6.存储引擎根据计划分类型执行sql命令
	
	7.sql接口将结果返回给请求程序，并将结果在查询缓存中保存一份
	
11.利用show profile 查看sql的执行周期

	修改配置文件/etc/my.cnf
	新增一行：query_cache_type=1
	重启mysql 
	
	查看profiling的状态
	show variables  like '%profiling%';
	默认是关闭的
	开启profiling  set profiling=1;
	
	执行show profiles;查看最近几次的查询执行计划（简要内容）
	
	查看具体的执行计划
	show profile cpu,block io for query 查询编号;
	
	再次执行相同的sql语句，并在此查看执行计划，发现因为命中缓存，无需再打开表，时间大大缩短。

12.MyISAM和InnoDB两种引擎的区别
	
	mysql默认引擎为InnoDB
	
	对比项			MyISAM				InnoDB
	外键			不支持		 	 	 支持
	事务			不支持		 	 	 支持
	行表锁			 表锁			 	 行锁（可能引发死锁）	
	缓存			缓存索引		 	 缓存索引和真实数据
	关注点	节省资源、消耗少、简单业务	 并发写、事务、更大资源
	默认安装		   Y				   Y
	默认使用		   N 			       Y
	自带系统表使用	   Y			       N

	
	表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作	行锁,操作时只锁某一行，不对其它行有影响，适合高并发的操作
	
	只缓存索引，不缓存真实数据	不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响
	
	Archive引擎即档案引擎，就如同档案一样可以进行插入、查看操作，不能进行修改、删除操作。
	
	CSV引擎
	CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但不支持索引。
	CSV引擎可以作为一种数据交换的机制，非常有用。
	CSV存储的数据直接可以在操作系统里，用文本编辑器，或者excel读取。

	Federated引擎
	Federated引擎是访问其他MySQL服务器的一个代理，应急可用
	
***13.索引
	-1.帮助MySQL高效获取数据的数据结构，因此mysql索引的本质就是数据结构
	
	-2.Btree和B+tree
		
		Btree结构
		-指引搜索方向的数据项
		-指向下一个磁盘块的指针
		-指向数据的指针
		-真正的数据（存放在叶子节点中）
	
		Btree用到二分查找的算法
		
		B+tree结构
		-指向数据项的指针
		-向下指针
		
***14.mysql为什么选择B+tree

	1) B+树的磁盘读写代价更低 
	　　B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。 
	
	2) B+树的查询效率更加稳定 
	　　由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。

15.聚簇索引与分聚簇索引的区别
	
	-聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据
			  顺序是排好的
    -非聚簇索引：将数据存储于索引分开结构，索引结构的叶子节点指向了数据的对应行，myisam通过key_buffer把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因

	-聚簇索引的好处：
    按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不不用从多个数据块中提取数据，所以节省了大量的io操作。
    
	-聚簇索引的限制：
    对于mysql数据库目前只有innodb数据引擎支持聚簇索引，而Myisam并不支持聚簇索引。
    由于数据物理存储排序方式只能有一种，所以每个Mysql的表只能有一个聚簇索引。一般情况下就是该表的主键。
    为了充分利用聚簇索引的聚簇的特性，所以innodb表的主键列尽量选用有序的顺序id，而不建议用无序的id，比如uuid这种。
	
16.索引的创建

	CREATE [UNIQUE ] INDEX [indexName] ON table_name(column)) 
	
	#查看索引
	SHOW INDEX FROM t_emp;

	#创建单值索引
	CREATE  INDEX idx_name ON t_emp(NAME); 

	#单独建唯一索引：
	CREATE UNIQUE INDEX idx_empno ON t_emp(empno); 

	#主键索引，一般不要修改

	#单独建复合索引：
	CREATE INDEX idx_age_name_depid ON t_emp(age,NAME,deptId);

17.性能分析
	-Explain 
	使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。
	
	-执行计划包含的信息字段的含义
	
	优化索引需要参考的主要的几个字段：
	1）id 查询的序列id
	2）type 读取数据的操作类型
		从最好到最差依次是（未涵盖全部类型，只是常见的几个类型）
		system>const>eq_ref>ref>range>index>ALL
		
		所有的类型排序：
		system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL 
	
		***一般来说，得保证查询至少达到range级别，最好能达到ref。
	
		几种类型的解释：
		-1.range：只检索给定范围的行,使用一个索引来选择行。key列显示使用了哪个索引；一般就是在你的where语句中出现了between、<、>、in等的查询；这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。
		
		-2.index：出现index是sql使用了索引但是没用通过索引进行过滤，一般是使用了覆盖索引或者是利用索引进行了排序分组
		
		-3.all：Full Table Scan，将遍历全表以找到匹配的行
	
	3）key_len 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。key_len字段能够帮你检查是否充分的利用上了索引
		
		计算规则：
		
		1、先看索引上字段的类型+长度比如 int=4 ;  varchar(20) =20 ; char(20) =20  
		2、如果是varchar或者char这种字符串字段，视字符集要乘不同的值，比如utf-8  要乘 3,GBK要乘2，
		3、varchar这种动态字符串要加2个字节
		4、允许为空的字段要加1个字节
		
	4）rows  rows列显示MySQL认为它执行查询时必须检查的行数。越少越好
	
	5）Extra  包含不适合在其他列中显示但十分重要的额外信息
	
		出现以下三个字段说明需要进行索引优化
		-1.Using filesort 说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”。
		
		-2.Using temporary 
		使了用临时表保存中间结果,MySQL在对查询结果排序时使用临时表。常见于排序 order by 和分组查询 group by。
		
		-3.using join buffer  使用了连接缓存：
		
		还有剩余字段：USING index、Using where、impossible where、select tables optimized away  详细解释见课件
		
		
18.如何快速向表中插入上万条数据
	
	-1.编写java程序使用for循环拼接sql insert values语句。通过for循环一次拼接多次执行插入
	
	-2.使用索引的情况下，由于索引会使所有写操作变慢，因此可以删除除主键索引外的所有索引来提高插入效率
	
	-3.使用mybatis或者jdbc批量操作的方法
	
	-4.关闭mysql的自动commit
	
	-5.创建多线程并行操作
	
19.批量插入数据脚本 详细操作见课件

20.索引优化使用规则

	-0.遵循两大原则：
		--1.全值匹配我最爱
			where关键字后使用了几个字段，建索引时这几个字段都涵盖上，查询效果最好
		--2.最佳左前缀法则
			指的是查询从索引的最左前列开始并且不跳过索引中的列。
			过滤条件要使用索引必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法被使用。
	

	-1.单表使用索引一般性建议
		--对于单键索引，尽量选择针对当前query过滤性更好的索引
		--在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。
		--在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引
		--在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面
		--书写sql语句时，尽量避免造成索引失效的情况
		
		常见索引失效的情况：
		
		--不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描
		--在索引中，使用了范围查询的字段的右边的所有字段，索引失效
		--mysql 在使用不等于(!= 或者<>)的时候无法使用索引会导致全表扫描
		--is not null 也无法使用索引,但是is null是可以使用索引的
		--like后以通配符%开头(比如'%abc...')mysql索引失效会变成全表扫描的操作
		--字符串不加单引号索引失效
		
	-2.关联查询优化
		
		驱动表：读取的第一张表，也是无法避免全表扫描的表
		被驱动表：与驱动表关联的表，在驱动表之后扫描的表
		
		优化建议：
		--1、保证被驱动表的join字段已经被索引
		--2、left join 时，选择小表作为驱动表，大表作为被驱动表。
		--3、inner join 时，mysql会自己帮你把小结果集的表选为驱动表。
		--4、子查询尽量不要放在被驱动表，有可能使用不到索引。
		--5、能够直接多表关联的尽量直接关联，不用子查询。
		
	-3.子查询优化
		
		建议：
		尽量不要使用not in  或者 not exists；用left outer join  on  xxx is null 替代
		
	-4.排序分组优化
	
		-1.ORDER BY子句，尽量使用Index方式排序,避免使用FileSort方式排序
			
			索引失效的情况：
			--1.无过滤，不索引
				没有过滤条件，索引失效。limit也算过滤
			--2.顺序错，必排序
				order by后的字段顺序和索引字段的顺序不一致会导致索引失效
			--3.方向反 必排序
				排序方式不一致，索引失效
		
		-2.GROUP BY关键字优化
			group by 使用索引的原则几乎跟order by一致 ，唯一区别是groupby 即使没有过滤条件用到索引，也可以直接使用索引。
		
	-5.最后使用索引的手段：覆盖索引
		简单说就是，select 到 from 之间查询的列 <=使用的索引列+主键
		不要使用select * from  而要使用select 具体字段 from

21.查询截取分析
	-1.慢查询日志
		
		查看慢查询日志状态：
		SHOW VARIABLES LIKE '%slow_query_log%';
		开启慢查询日志：
		set global slow_query_log=1;（不加global，仅是当前窗口有效）
		
		重启mysql，即会失效。开发中，也不会永久开启，太伤性能
		
		mysql判定为慢查询的标准：
		这个标准由参数long_query_time控制
		命令修改该参数（也可修改mysql的配置文件my.cnf）
		set global long_query_time = 1;
		
		mysql源码中规定当运行时间大于等于long_query_time，将视为慢查询
		
		查询慢查询日志
		vim /var/lib/mysql/mc-slow.log
		
	-2.日志分析工具mysqldumpslow
	
		指令含义
		mysqldumpslow +
			-a: 不将数字抽象成N，字符串抽象成S
			-s: 是表示按照何种方式排序；
			c: 访问次数
			l: 锁定时间
			r: 返回记录
			t: 查询时间
			al:平均锁定时间
			ar:平均返回记录数
			at:平均查询时间
			-t:即为返回前面多少条的数据
			-g:后边搭配一个正则匹配模式，大小写不敏感的
			
			
		工作常用参考
			得到返回记录集最多的10个SQL
			mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log
			 
			得到访问次数最多的10个SQL
			mysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log
			 
			得到按照时间排序的前10条里面含有左连接的查询语句
			mysqldumpslow -s t -t 10 -g "left join" /var/lib/mysql/atguigu-slow.log
			 
			另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况
			mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log | more

	-2.SHOW PROCESSLIST
		
		能干什么：查询所有用户正在干什么
		如果出现不顺眼的: kill [id]（表死锁的时候可以用到）
	
	-3.开发中，项目查询变慢，如何优化？
	
	首先，联系运维人员，让运维开启慢查询日志；
	开启慢查询日志后，观察1到2周的时间；
	2周过后，拿到运维人员发过来的慢查询日志，根据日志进行分析；
	找出查询次数较多的sql，使用Explain分析；
	对具体需要优化的地方，建立合适的索引；
	最后记得关闭慢查询日志
	

22.视图

	-1.是什么？
	将一段查询sql封装为一个虚拟的表。 
	这个虚拟表只保存了sql逻辑，不会保存任何查询结果。
	
	-2.作用
	1、封装复杂sql语句，提高复用性
	2、逻辑放在数据库上面，更新不需要发布程序，面对频繁的需求变更更灵活
	
	-3.适用场景
	很多地方可以共用的一组查询结果、报表
	
	-4.语法
	创建：
		CREATE VIEW view_name 
		AS
		[查询sql]
			
	查询：select * from view_name		
		
	创建或更新视图:
		CREATE OR REPLACE VIEW view_name 
		AS
		[新的查询sql]
	
	-5.注意事项
	mysql5.5的视图中不允许有from 后面的子查询，但oracle可以
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

		