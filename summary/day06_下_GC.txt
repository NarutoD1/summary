GC

0.面试题
-1.JVM内存模型以及分区，需要详细到每个区放什么
-2.堆里面的分区：Eden，survival from to，老年代，各自的特点。
-3.GC的三种收集方法：标记清除、标记整理、复制算法的原理与特点，分别用在什么地方
-4.Minor GC与Full GC分别在什么时候发生
	Minor GC： Eden存储空间占用到80%左右将触发Minor GC
	Full GC：老年代存储空间快占满时将触发Full GC，有几率将与堆相关的内容全部回收一遍


1.GC是什么
字面意思：垃圾回收
本质还以：分代收集算法
			-次数上频繁收集Young区
			-次数上较少收集Old区
			-基本不动Perm区

2.GC的4种算法
	-引用计数法（已被废弃）
		new的对象在进入伊甸区时都会携带一个引用计数器，这个引用计数器记录对象被引用的次数，当引用次数为0时，这个对象就要被回收。
		
		此算法存在两大弊端：
		--每个对象都携带一个计数器，会消耗一定的内存，同时每次对对象赋值都要维护计数器
		--对对象间的循环引用较难处理
	
		因此JVM不再采用这种算法
	
	-复制算法(Copying)
	
		在新生代中Minor GC使用的算法
		在Eden区的对象经历一次普通GC（Minor GC）后存活下来的对象将通过复制算法转移到幸存to区，之前幸存from的对象也将通过复制算法转移到幸存to区，一次交换完成，from和to交换身份
		
		其实实质上相当于剪切的操作。
		
		优点：
		-没有标记和清楚的过程，效率高
		-不会产生内存碎片
		
		缺点：
		需要双倍的内存空间，幸存区有两块，原因就在这里
		浪费了一半内存
	
	
	-标记清除(Mark-Sweep)
	
		在老年代使用的算法
		
		先扫描一次对存活的对象进行标记
		再次扫描对为标记的对象进行清楚
		
		优点：不需要额外空间。
		缺点：扫描两次，耗时严重，效率低。
			  容易产生内存碎片
			  进行GC时，将暂停程序功能，以免误杀对象。造成用户体验差
		

	-标记压缩(Mark-Compact)/标记整理
	
		老年代使用的算法
		先扫描一次对存活的对象进行标记
		再次扫描将标记的对象按地址的顺序排列到内存的一侧，未被标记的对象则在内存边缘，对内存边缘进行清理即可
		
		优点：没有内存碎片，内存空间得到有效利用
		缺点：移动对象需要消耗一定的成本，和标记清楚一样，两次扫描，效率低且是最低，进行GC时，暂停程序功能，用户体验差
	
	-标记清除压缩(Mark-Sweep-Compact)
	
		老年代使用的算法
		
		标记清除和标记压缩的结合使用
		
		进行多次标记清除算法后，再进行压缩整理内存
		
		优点：进少了移动对象的成本
		缺点：同样是效率较复制算法低一些，用户体验差
	
		
	
